#include "imports/stdlib.fc";
#include "imports/messages.fc";
#include "imports/op.fc";
#include "imports/params.fc";

;; Storage
;;
;; smc_owner MsgAddressInt
;; games_dict Cell

{-

Игра камень/ножницы/бумага
2 варианта игры: 
1. игра с платформой. 
2. Игра друг с другом

1. Игра с платформой.
Пользователь на платформе выбирает персонажа 
выбирает оружие(камень, ножницы, бумага). 
Ставка фиксирована 1 тон и отправляет на смарт контракт.
Если пользователь выиграл, то ему отправляется 2тона (минус комиссия за транзакцию)
Если ничья, то выплачивается его ставка (1 тон минус комиссия за транзакцию)
Если пользователь проиграл, то деньги остаются на смарт контракте

2. Игра друг с другом
Пользователь на платформе выбирает персонажа 
выбирает оружие(камень, ножницы, бумага)
делает ставку (любая от 1 тона до бесконечности)
ставит время ставки. Например неделя, значит если за это время не найдется соперник, то ставка возвращается обратно пользователю(минус комиссия за транзакцию)
Пользователь может самостоятельно отменить ставку в любое время до начала игры, ставка возвращается обратно пользователю(минус комиссия за транзакцию)
Другой пользователь видит текущие ставки и выбирает с кем сыграть, должен поставить такую же ставку, выбирает персонажа и оружие
Происходит игра.
Один из них выигрывает, получает свой выигрыш (минус комиссия платформы 5% и минус комиссия за транзакцию)
Если ничья, то каждый получает свою ставку обратно(минус комиссия за транзакцию. комиссия платформы не берется)
Ставка уходит из списка текущих ставок и по ней уже играть нельзя

-}

(slice, cell) load_data() inline_ref {
    slice ds = get_data().begin_parse()
    return (
        ds~load_msg_addr(), ;; smc_owner
        (slice_bits(ds~load_dict()) ? ds~load_dict() : new_dict()) ;; games_dict
    );
}

() store_data(slice smc_owner, cell games_dict) impure inline_ref {
    set_data(
        begin_cell()
            .store_slice(smc_owner)
            .store_dict(games_dict)
        .end_cell())
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    
    if (op == op::game_with_platform) {

        throw_unless(666, msg_value == 1000000000);

        int user_choice = in_msg_body~load_uint(2);

        randomize_lt();

        int platform_choice = rand(3);

        ;; 0 - Rock
        ;; 1 - Paper
        ;; 2 - Scissors
        ;; 0 & 2 || 1 & 0 || 2 & 0

        if (
            (user_choice == 0 & platform_choice == 2) ||
            (user_choice == 1 & platform_choice == 0) ||
            (user_choice == 2 & platform_choice == 0)
        ) { ;; user won
            ;; in case user wins
            messages::send_empty(2000000000, sender_address, 0);
            return ();
        } elseif (
            (user_choice == 0 & platform_choice == 0) ||
            (user_choice == 1 & platform_choice == 1) ||
            (user_choice == 2 & platform_choice == 2)
        ) {
            ;; draw between user and platform
            messages::send_empty(0, sender_address, 64);
            return ();
        } else {
            ;; user loses
            return ();
        }
    }

    (slice smc_owner, cell games_dict) = load_data();

    cell new_game_dict;

    if (op == op::start_game_with_user) {

        throw_unless(555, msg_value >= 1000000000);

        (int key, slice value, int flag) = dict_get_max?(games_dict, 64);

        int user_choice = in_msg_body~load_uint(2);
        int game_duration_unix_seconds = in_msg_body~load_uint(32);

        slice game_slice = 
            begin_cell()
                .store_slice(sender_address) ;; player_initiator
                .store_coins(msg_value) ;; player_initiator_bet
                .store_uint(initiator_choice, 2)
                .store_uint(now() + game_duration_unix_seconds, 32) ;; game_termination_unix_time
            .end_cell().begin_parse();

        if (flag) { ;; games present in Dict

            new_game_dict = udict_set(games_dict, 64, key + 1, game_slice);

        } else { ;; first game

            new_game_dict = udict_set(games_dict, 64, 0, game_slice);

        }

    }

    if (op == op::return_tons) {

        int id_of_initiated_game = in_msg_body~load_uint(64);

        (cell new_game_dict, slice game_slice, int flag) = udict_delete_get?(games_dict, 64, id_of_initiated_game);

        if (flag) {
            slice player_initiator = game_slice~load_msg_addr();
            int player_initiator_bet = game_slice~load_coins();
            throw_unless(444, player_initiator == sender_address);
            messages::send_empty(player_initiator_bet - fee::game_fees, player_initiator, 0);
            return ();
        } else {
            return ();
        }

    }

    if (op == op::end_game_with_user) {

    int id_of_initiated_game = in_msg_body~load_uint(64);
    int user_choice = in_msg_body~load_uint(2);

    (slice game_slice, int flag) = udict_get?(games_dict, 64, id_of_initiated_game);

    if (flag) {

        slice player_initiator = game_slice~load_msg_addr();
        int player_initiator_bet = game_slice~load_coins();
        int initiator_choice = game_slice~load_uint(2);
        int game_termination_unix_time = game_slice~load_uint(32);

        throw_unless(777, msg_value == player_initiator_bet);
        throw_unless(333, game_termination_unix_time <= now());

        if () { ;; initiator wins
            messages::send_empty(msg_value * 2 / 100 * 95, player_initiator, 0);
            return ();
        } ifelse { ;; draw
            messages::send_empty(msg_value, player_initiator, 0);
            messages::send_empty(msg_value, sender_address, 0);
            return ();
        } else { ;; initiator looses
            messages::send_empty(msg_value * 2 / 100 * 95, sender_address, 0);
            return ();
        }

    }

    }

    save_data(slice smc_owner, cell new_game_dict);

}

(slice, cell) get_game_data() method_id {
    return load_data();
}
